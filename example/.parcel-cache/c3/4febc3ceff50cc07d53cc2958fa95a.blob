'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var electron = require('electron');

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function isDisposable(disposable) {
  return disposable.add && disposable.dispose && disposable._addParent && disposable._removeParent;
}

var Disposable = /*#__PURE__*/function () {
  function Disposable() {
    this._disposables = new Set();
    this._disposed = false;
    this._parent = null;
  }

  var _proto = Disposable.prototype;

  _proto.add = function add(disposable) {
    if (disposable) {
      this._disposables.add(disposable);

      if (disposable instanceof Disposable) {
        disposable._addParent(this);
      }
    }

    return this;
  };

  _proto.remove = function remove(disposable) {
    this._disposables["delete"](disposable);

    if (disposable instanceof Disposable) {
      disposable._removeParent(this);
    }

    return this;
  };

  _proto._addParent = function _addParent(parent) {
    return Array.isArray(this._parent) ? (this._parent.push(parent), this._parent) : this._parent ? this._parent = [this._parent, parent] : this._parent = parent;
  };

  _proto._removeParent = function _removeParent(parent) {
    if (Array.isArray(this._parent)) {
      var idx = this._parent.indexOf(parent);

      idx > -1 && this._parent.splice(idx, 1);
    } else {
      this._parent = null;
    }
  };

  _proto.dispose = function dispose() {
    var _this = this;

    if (!this._disposed) {
      var errors = [];
      this._disposed = true;
      var _parent = this._parent;

      if (_parent) {
        this._parent = null;

        if (Array.isArray(_parent)) {
          _parent.forEach(function (parent) {
            parent.remove(_this);
          });
        } else {
          _parent.remove(this);
        }
      }

      this._disposables.forEach(function (disposable) {
        try {
          if (isDisposable(disposable)) {
            disposable.dispose();
          } else {
            disposable();
          }
        } catch (error) {
          errors.push(error);
        }
      });

      this._disposables.clear();

      if (errors.length) {
        throw Error("[UnCatchError]=> dispose error(" + errors.length + " errors)");
      }
    }
  };

  return Disposable;
}();

var Emitter = /*#__PURE__*/function (_Disposable) {
  _inheritsLoose(Emitter, _Disposable);

  function Emitter(_resolve, _reject) {
    var _this;

    _this = _Disposable.call(this) || this;
    _this._resolve = _resolve;
    _this._reject = _reject;
    _this.isClosed = false;

    _Disposable.prototype.add.call(_assertThisInitialized(_this), function () {
      _this.isClosed = true;
    });

    return _this;
  }

  var _proto = Emitter.prototype;

  _proto.emit = function emit(data) {
    if (!this.isClosed) {
      var _this$_resolve;

      (_this$_resolve = this._resolve) == null ? void 0 : _this$_resolve.call(this, data);
    }
  };

  _proto.error = function error(_error) {
    if (!this.isClosed) {
      var _this$_reject;

      (_this$_reject = this._reject) == null ? void 0 : _this$_reject.call(this, _error);
    }
  };

  _proto.done = function done() {
    this.dispose();
  };

  return Emitter;
}(Disposable);
var EventEmitter = /*#__PURE__*/function () {
  function EventEmitter(_event) {
    this._event = _event;
  }

  var _proto2 = EventEmitter.prototype;

  _proto2.pipe = function pipe(fn) {
    return fn(this);
  };

  _proto2.listen = function listen(success, error) {
    var emitter = new Emitter(success, error);

    if (this._event) {
      var _this$_event;

      emitter.add((_this$_event = this._event(emitter)) != null ? _this$_event : undefined);
    }

    return emitter;
  };

  return EventEmitter;
}();

var Protocol = /*#__PURE__*/function (_EventEmitter) {
  _inheritsLoose(Protocol, _EventEmitter);

  function Protocol(sender, onMessage) {
    var _this;

    _this = _EventEmitter.call(this, function (emitter) {
      var emit = function emit(e) {
        return emitter.emit(e);
      };

      sender.on('ipc:message', emit);
      return function () {
        sender.removeListener('ipc:message', emit);
      };
    }) || this;
    sender.on('ipc:hello', function (e) {
      console.log(e, 'ipc:hello');
    });
    return _this;
  }

  return Protocol;
}(EventEmitter);

var ServiceManager = /*#__PURE__*/function () {
  function ServiceManager() {}

  ServiceManager.registerService = function registerService(name, service) {
    if (!ServiceManager.serviceMap.has(name)) {
      ServiceManager.serviceMap.set(name, service);
    }
  };

  return ServiceManager;
}();

ServiceManager.serviceMap = /*#__PURE__*/new Map();

var IPCServer = /*#__PURE__*/function () {
  function IPCServer() {
    var _this = this;

    this._connections = new Set();
    this._protocol = new Protocol(electron.ipcMain, function () {});
    this._event = new EventEmitter(function (emitter) {
      var listener = _this._protocol.listen(function (res) {
        emitter.emit(res);
      });

      return function () {
        listener.dispose();
      };
    });
    console.log(this._event);
  }

  var _proto2 = IPCServer.prototype;

  _proto2.registerService = function registerService(name, service) {
    ServiceManager.registerService(name, service);

    this._connections.forEach(function (connection) {
      connection.link(name, service);
    });

    return this;
  };

  return IPCServer;
}();

var IPCClient = function IPCClient() {
  electron.ipcRenderer.send('ipc:hello', 'hello');
};

exports.IPCClient = IPCClient;
exports.IPCServer = IPCServer;
